
1. What is a graph?
  - Graph consists of a finite set of vertices or (Nodes) and a set of edges that connect a pair of nodes.

2. Graph Terminology
  A. Vertices are the node of the graph.
  B. Edge: is the line that connects pairs of vertices.
  C. Unweighted Graph:  A graph that does not have a weight associated with an edge.
  D. Weighted Graph:  A graph that has a weight associated with an edge.
  E. Undirected Graph:  In case the edges of the graph do not have a direction between them.
  F. Directed Graph:  In case the edges of the graph have a direction between them.
  G. Cyclic Graph:  a graph that has a least one loop.
  H. Acyclic Graph:  a graph that has no loop.
  I. Tree: This is a special case of a directed acyclic graph.

3. Graph Types:

                           Graph
                         /         \
                        /           \
                       /             \
                  Directed          Undirected
                  /    \              /    \
                 /      \            /      \
                /        \          /        \
            Weighted  Unweighted  Weighted Unweighted
             /    \                /    \
            /      \              /      \
           /        \            /        \
      Positive    Negative    Positive  Negative



   A.Unweighted - Undirected: No weight associated with any edges, No direction between edges

               V1 - - -V3
               |\       \
               | \       \
               |  \       \
               |   \      V5
               |    \     /
               |     \   /
               |      \ /
               V2- - - V4
   B.Unweighted - Directed: No weight associated with any edges, there is a direction between edges

                V1 - - ->V3
                ^ ^        ^
                |  \        \
                |   \        \
                |    \       V5
                |     \      ^
                |      \    /
                |       \  /
                V2- - -> V4
   C.Positive - weighted - Undirected: there is a positive weight associated with edges, No direction between edges

                    5
               V1 - - -V3
               |\       \
               | \       \ 1
               |  \       \
             2 |   \ 4     V5
               |    \     /
               |     \   / 7
               |      \ /
               V2- - - V4
                   3
   D.Positive - weighted - Directed: there is a positive weight associated with edges, there is a direction between edges

                      5
                 V1 - - -> V3
                 ^ ^        ^
                 |  \        \ 1
                 |   \        \
                 |    \ 4     V5
                2|     \      ^
                 |      \    /
                 |       \  / 7
                 V2- - -> V4
                      3
   E.Negative - weighted - Undirected: there is at least a negative weight associated with edges, No direction between edges

                    -5
                V1 - - -V3
                |\       \
                | \       \ 1
                |  \       \
              2 |   \ -4    V5
                |    \     /
                |     \   / 7
                |      \ /
                V2- - - V4
                    3
   F.Negative - weighted - Directed: there is at least a negative weight associated with edges, there is a direction between edges

                       -5
                  V1 - - -> V3
                  ^ ^        ^
                  |  \        \ 1
                  |   \        \
                  |    \ -4    V5
                 2|     \      ^
                  |      \    /
                  |       \  / 7
                  V2- - -> V4
                       3

 4. Graph representation
   A. Adjacency matrix: an adjacency matrix is a square matrix or 2D array. and the elements of the matrix indicate whether pairs of vertices are adjacent or not in the graph.

                                             _A_ _B_ _C_ _D_ _E_
                   A - - - B               A|_0_|_1_|_1_|_1_|_0_|
                   |\       \              B|_1_|_0_|_0_|_0_|_1_|
                   | \       \             C|_1_|_0_|_0_|_1_|_0_|
                   |  \       \            D|_1_|_0_|_1_|_0_|_1_|
                   |   \       E           E|_0_|_1_|_0_|_1_|_0_|
                   |    \     /
                   |     \   /
                   |      \ /
                   C- - -  D

   B. Adjacency List is a collection of unordered lists used to represent a graph. Each list describes the set of neighbors of a vertex in the graph.

                      A - - - B               |_A_|->|_B_|_|->|_D_|_|->|_C_|_|
                      |\       \              |_B_|->|_A_|_|->|_E_|_|
                      | \       \             |_C_|->|_A_|_|->|_D_|_|   _ _ _
                      |  \       \            |_D_|->|_A_|_|->|_C_|_|->|_E_|_|
                      |   \       E           |_E_|->|_B_|_|->|_D_|_|
                      |    \     /
                      |     \   /
                      |      \ /
                      C- - -  D

   -> When to use?
     A. Adjacency matrix: if the graph is complete or almost complete which means all cells have 1's.
     A. Adjacency List: if the number of edges is few then we should use Adjacency List.

 5. Graph traversal: it is a process of visiting all vertices in a given graph,

   A. Breadth-first search: it starts at some arbitrary node of a given graph and explores the neighbor's nodes that are "at the current level", before moving to the next node.
       -> When to use?
        - if we know that the target vertex is close to the starting point.
       -> Pesudocode

          while all vertices are not explored -------->O(v) -----------------------------------------------------------
           enqueue any starting vertices ------>O(1)                                                                   |
           while queue is not empty -------->O(ver) ----------------------                                             |-> Time and space complexity = O(V+E)
            p = dequeue() ------>O(1)                                     |                                            |
            if p is unvisited ------>O(1)                                 |-> vertices + adjacent = edges = O(edges)---
              mark as visited ------>O(1)                                 |
              enqueue unvisited adjacent vertices of p ------>O(adj)------


   B. Depth-first search: it starts at some arbitrary node of a given graph, and explore as far as possible along each edge before backtracking.
       -> When to use?
        - if we know that the target vertex is buried very deep.
       -> Pesudocode

          while all vertices are not explored -------->O(v) -----------------------------------------------------------
           push any starting vertices ------>O(1)                                                                      |
           while stack is not empty -------->O(ver) ----------------------                                             |-> Time and space complexity = O(V+E)
            p = pop() ------>O(1)                                         |                                            |
            if p is unvisited ------>O(1)                                 |-> vertices + adjacent = edges = O(edges)---
              mark as visited ------>O(1)                                 |
                push unvisited adjacent vertices of p ------>O(adj)---------


 6. Topological sort: sorts a given action in such a way that if there is a dependency of one action on another, then the dependant action always comes later than its parent action.
       -> Pesudocode

          topoSort(Node,Stack)____________
           for all vertices               |
             if vertex unvisited          |-> O(V) ---------
                topoVisited(vertex)_______|                 |
                                                            |
          topoVisited(node, stack)---------                 | -> Time and space complexity = O(V+E)
           for each nodes                  |                |
             if unvisited                  |-> O(E)---------
               topoVisited(neighbor)       |
           stack.push(neighbor)------------

 7. Single source shortest path problem "SSSPP": it is about finding the path between a given vertex "source" to all other vertices in a graph such that
                                           the total distance between them "source and destination" is minimum.

       -> solve this problem using three types of algorithms

         A. Breadth first search algorithm:

             -> Why DFS not a working solution?
              -DFS has the tendency to go "as far as possible" from source, hence it can never find the shortest path

         B. Dijkstra's algorithm:

             -> When not working?
               - with negative Cycle: a cycle is a path of edges or vertices wherein a vertex is reachable from itself, and the total weight of the cycle is a negative number.

         C. Bellman Ford algorithm: if there is a negative cycle it catches it and report its existence

                                     BFS                        |               Dijkstra                   |                    Bellman ford

     A. Time complexity  |           O(V~2)                     |                 O(V~2)                    |                       O(VE)
     B. Space complexity |           O(E)                       |                 O(V)                      |                       O(V)
     C. Implementation   |           Easy                       |               Moderate                    |                     Moderate
     D. Limitation       |    Not working for weighted graphs   |       Not working negative cycle          |                       N/A
     E. Unweighted graph | Good as time and easy implementation |   Not used as implementation not easy     |            Not used as bad time complexity
     F. weighted graph   |          Not supported               |   Use as time is better than bellman      |            Not used as bad time complexity
     G. Negative cycle:  |          Not supported               |               Not supported               |                     supported


 8. All pairs shortest path problem: it is about finding a path between every vertex to all other vertices in a graph such that the total distance between them (source and destination) is minimum.

         A. Floyd warshall algorithm:

             -> formula
                 if D[source][destination] > D[source][viaX] + D[viaX][destination]
                    D[source][destination] = D[source][viaX] + D[viaX][destination]

             -> why to use?
                - The solution takes into account all those steps:
              A. The vertex is not reachable
              B. Two vertices are directly connected
                 - This is the best solution
                 - It can be improved via other vertex
              C. Two vertices are connected via other vertex

             -> not working negative Cycle
              A. to go through cycle we need to go via negative cycle participating vertex at least twice
              B. FW never runs loops twice via same vertex
              C. Hence FW can never detect a negative cycle


                                        BFS                        |               Dijkstra                   |                    Bellman ford               |        Floyd warshall

        A. Time complexity  |           O(V~3)                     |                 O(V~3)                    |                       O(VE~2)                |          O(V~3)
        B. Space complexity |           O(EV)                      |                 O(EV)                     |                       O(V~2)                 |          O(V~2)
        C. Implementation   |           Easy                       |               Moderate                    |                     Moderate                 |         Moderate
        D. Limitation       |    Not working for weighted graphs   |     Not working for negative cycle        |                       N/A                    | Not working for negative cycle
        E. Unweighted graph | Good as time and easy implementation |   Not use as priority queue slow it       |            Not used as bad time complexity   |         Can be used
        F. weighted graph   |          Not supported               |                Can be used                |            Not used as bad time complexity   | Can be preferred as easy implementation
        G. Negative cycle:  |          Not supported               |               Not supported               |                     supported                |          Not supported


 9. Minimum spanning tree "MST": is a subset of edges of connected, weighted, and undirected graph which

    A. Connects all vertices together
    B. No cycle
    C. Minimum total edge

    -> Disjoint set: is a data structure that keeps track of the set of elements that are partitioned into a number of disjoint sets and non-overlapping sets have representative which helps in identifying that set.

      - makeSet(N): used to create initial set
      - union(x,y): merge two given sets
      - findSet(x): returns the set name in which this element is there

             -> solve this problem using two types of algorithms:

                A.  Kruskal Algorithm:

                   - it is a Greedy algorithm
                   - it finds a minimum spanning tree for weighted undirected graphs in two steps:

                       1. Add increasing cost edges at each step
                       2. Avoid any cycle at each step

                  -> Pesudocode

                   Kruskal(G)
                   for each vertex
                     mackSet(v) -----------------------------------------> O(v)
                   sort each edge in non decreasing order by weight  ----> O(E Log(e)) | Time complexity = O(E log(E))
                   for each edge (u,v) ----------------------------------> O(e)        | Space Complexity = O(E+V)
                     if findSet(u) != findSet(v)
                       union(u,v)----------------------------------------> O(v)
                       cost = cost + edge(u,v  )


